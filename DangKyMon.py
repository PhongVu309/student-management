# Form implementation generated from reading ui file 'DangKyMon.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pyodbc

connection_string = (
    'DRIVER={ODBC Driver 17 for SQL Server};'
    'SERVER=PHONG-VU\\SQLEXPRESS;'
    'DATABASE=QuanLySinhVien;'
    'UID=sa;'
    'PWD=223003'
)
class Ui_DangKyMonWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(727, 475)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.txtTK = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTK.setGeometry(QtCore.QRect(230, 110, 161, 31))
        self.txtTK.setObjectName("txtTK")
        self.txtNgayDK = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtNgayDK.setGeometry(QtCore.QRect(380, 20, 113, 21))
        self.txtNgayDK.setObjectName("txtNgayDK")
        self.btnAdd = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(40, 340, 93, 28))
        self.btnAdd.setObjectName("btnAdd")
        self.btnSearch = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnSearch.setGeometry(QtCore.QRect(400, 110, 93, 31))
        self.btnSearch.setObjectName("btnSearch")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 60, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.txtMaSV = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtMaSV.setGeometry(QtCore.QRect(110, 20, 113, 21))
        self.txtMaSV.setObjectName("txtMaSV")
        self.txtMaMon = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtMaMon.setGeometry(QtCore.QRect(110, 60, 113, 21))
        self.txtMaMon.setObjectName("txtMaMon")
        self.btnUpdate = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnUpdate.setGeometry(QtCore.QRect(220, 340, 93, 28))
        self.btnUpdate.setObjectName("btnUpdate")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(280, 20, 91, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.tb_SinhVien = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tb_SinhVien.setGeometry(QtCore.QRect(20, 160, 471, 171))
        self.tb_SinhVien.setObjectName("tb_SinhVien")
        self.tb_SinhVien.setColumnCount(3)
        self.tb_SinhVien.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tb_SinhVien.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_SinhVien.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_SinhVien.setHorizontalHeaderItem(2, item)
        self.btnDelete = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnDelete.setGeometry(QtCore.QRect(390, 340, 93, 28))
        self.btnDelete.setObjectName("btnDelete")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 20, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Load data from database
        self.load_data()

        # Connect the cellClicked signal to the populate_fields method
        self.tb_SinhVien.cellClicked.connect(self.populate_fields)

        # Connect buttons to their respective methods
        self.btnAdd.clicked.connect(self.add_data)
        self.btnUpdate.clicked.connect(self.update_data)
        self.btnDelete.clicked.connect(self.delete_data)
        self.btnSearch.clicked.connect(self.search_data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnAdd.setText(_translate("MainWindow", "Thêm"))
        self.btnSearch.setText(_translate("MainWindow", "Tìm Kiếm"))
        self.label_2.setText(_translate("MainWindow", "Mã môn"))
        self.btnUpdate.setText(_translate("MainWindow", "Sửa"))
        self.label_3.setText(_translate("MainWindow", "Ngày đăng kí"))
        item = self.tb_SinhVien.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Mã SV"))
        item = self.tb_SinhVien.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Mã Môn"))
        item = self.tb_SinhVien.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Ngày Đăng Kí"))
        self.btnDelete.setText(_translate("MainWindow", "Xóa"))
        self.label.setText(_translate("MainWindow", "Mã SV"))

    def populate_fields(self, row, column):
        self.txtMaSV.setText(self.tb_SinhVien.item(row, 0).text())
        self.txtMaMon.setText(self.tb_SinhVien.item(row, 1).text())
        self.txtNgayDK.setText(self.tb_SinhVien.item(row, 2).text())

    def load_data(self):
        try:
            conn = pyodbc.connect(connection_string)
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DangKy")
            rows = cursor.fetchall()

            self.tb_SinhVien.setRowCount(len(rows))
            for row_idx, row_data in enumerate(rows):
                for col_idx, col_data in enumerate(row_data):
                    self.tb_SinhVien.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(str(col_data)))

            conn.close()
        except pyodbc.Error as e:
            print("Error in connection: ", e)

    def add_data(self):
        ma_sv = self.txtMaSV.text()
        ma_mon = self.txtMaMon.text()
        ngay_DK = self.txtNgayDK.text()

        try:
            conn = pyodbc.connect(connection_string)
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO DangKy (MaSV, MaMon, NgayDangKy) VALUES (?, ?,?)",
                (ma_sv, ma_mon, ngay_DK)
            )
            conn.commit()
            conn.close()

            self.load_data()
        except pyodbc.Error as e:
            print("Error in connection: ", e)

    def update_data(self):
        ma_sv = self.txtMaSV.text()
        ma_mon = self.txtMaMon.text()
        ngay_DK = self.txtNgayDK.text()

        try:
            conn = pyodbc.connect(connection_string)
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE DangKy SET MaMon = ?, NgayDangKy = ? WHERE MaSV = ?",
                (ma_mon, ngay_DK, ma_sv)
            )
            conn.commit()
            conn.close()

            self.load_data()
        except pyodbc.Error as e:
            print("Error in connection: ", e)

    def delete_data(self):
        ma_sv = self.txtMaSV.text()

        try:
            conn = pyodbc.connect(connection_string)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM DangKy WHERE MaSV = ?", (ma_sv,))
            conn.commit()
            conn.close()

            self.load_data()
        except pyodbc.Error as e:
            print("Error in connection: ", e)

    def search_data(self):
        search_term = self.txtTK.text()

        try:
            conn = pyodbc.connect(connection_string)
            cursor = conn.cursor()
            query = "SELECT MaSV, MaMon, NgayDangKy FROM DangKy WHERE MaSV LIKE ? OR MaMon LIKE ?"
            cursor.execute(query, ('%' + search_term + '%', '%' + search_term + '%'))
            rows = cursor.fetchall()

            self.tb_SinhVien.setRowCount(len(rows))
            for row_idx, row_data in enumerate(rows):
                for col_idx, col_data in enumerate(row_data):
                    self.tb_SinhVien.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(str(col_data)))

            conn.close()
        except pyodbc.Error as e:
            print("Error in connection: ", e)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_DangKyMonWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
